_ :: Set Int  (holes: Set Int)
_ :: Int  (holes: Int)
_ :: Bool  (holes: Bool)
emptyS :: Set Int
singleS :: Int -> Set Int
insertS :: Int -> Set Int -> Set Int
deleteS :: Int -> Set Int -> Set Int
sizeS :: Set Int -> Int
(<~) :: Int -> Set Int -> Bool
(\/) :: Set Int -> Set Int -> Set Int
(/\) :: Set Int -> Set Int -> Set Int
False :: Bool
True :: Bool
(==) :: Set Int -> Set Int -> Bool
(==) :: Int -> Int -> Bool
(==) :: Bool -> Bool -> Bool

                  insertS x s == s \/ singleS x
                       s /\ s == s
                       s \/ s == s
                  s /\ emptyS == emptyS
                  s \/ emptyS == s
             deleteS x emptyS == emptyS
                       s /\ t == t /\ s
                       s \/ t == t \/ s
        deleteS x (singleS x) == emptyS
                (s /\ t) /\ u == s /\ (t /\ u)
                (s \/ t) \/ u == s \/ (t \/ u)
           deleteS x (s /\ t) == s /\ deleteS x t
      deleteS x (deleteS x s) == deleteS x s
                s /\ (s \/ t) == s
             s /\ deleteS x s == deleteS x s
                s \/ (s /\ t) == s
             s \/ deleteS x s == s
      deleteS x (deleteS y s) == deleteS y (deleteS x s)
             s /\ deleteS x t == t /\ deleteS x s
            sizeS (singleS x) == sizeS (singleS y)
sizeS (deleteS x (singleS y)) == sizeS (deleteS y (singleS x))
                (s == emptyS) == (sizeS s == sizeS emptyS)
                  x <~ emptyS == False
               x <~ singleS y == (x == y)
           (s == deleteS x s) == (False == x <~ s)
             x <~ deleteS x s == False
                (s /\ t == s) == (t == s \/ t)
     (singleS x == singleS y) == (x == y)

                emptyS <= s
          sizeS emptyS <= sizeS s
singleS (sizeS emptyS) <= singleS (sizeS s)

x <~ s ==> s \/ deleteS x t == s \/ t

