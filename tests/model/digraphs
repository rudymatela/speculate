max expr size  =    5
  |- on ineqs  =    4
  |- on conds  =    4
max  #-tests   = 6000
min  #-tests   =  300  (to consider p ==> q true)
max  #-vars    =    2  (for inequational and conditional laws)

_ :: [Nat]  (holes: [Nat])
_ :: Digraph Nat  (holes: Digraph Nat)
_ :: Nat  (holes: Nat)
_ :: Bool  (holes: Bool)
emptyDigraph :: Digraph Nat
preds :: Nat -> Digraph Nat -> [Nat]
succs :: Nat -> Digraph Nat -> [Nat]
isNode :: Nat -> Digraph Nat -> Bool
isEdge :: Nat -> Nat -> Digraph Nat -> Bool
isPath :: Nat -> Nat -> Digraph Nat -> Bool
addNode :: Nat -> Digraph Nat -> Digraph Nat
addEdge :: Nat -> Nat -> Digraph Nat -> Digraph Nat
subgraph :: [Nat] -> Digraph Nat -> Digraph Nat
False :: Bool
True :: Bool
[] :: [Nat]
elem :: Nat -> [Nat] -> Bool
(==) :: [Nat] -> [Nat] -> Bool
(==) :: Digraph Nat -> Digraph Nat -> Bool
(==) :: Nat -> Nat -> Bool
(==) :: Bool -> Bool -> Bool

         preds x emptyDigraph == []
         succs x emptyDigraph == []
        preds x (addNode y a) == preds x a
        succs x (addNode y a) == succs x a
     subgraph xs emptyDigraph == emptyDigraph
                subgraph [] a == emptyDigraph
  subgraph xs (subgraph xs a) == subgraph xs a
      addNode x (addNode x a) == addNode x a
  subgraph xs (subgraph ys a) == subgraph ys (subgraph xs a)
      addNode x (addNode y a) == addNode y (addNode x a)
        isNode x emptyDigraph == False
                     (x == y) == isNode x (addNode y emptyDigraph)
                 isEdge x y a == elem x (preds y a)
                 isPath x x a == isNode x a
      isPath x y emptyDigraph == False
       isNode x (addNode x a) == True
           (a == addNode x a) == isNode x a
(emptyDigraph == addNode x a) == False
           elem x (preds y a) == elem y (succs x a)

            emptyDigraph <=  a
                       a <=  addNode x a
           subgraph xs a <=  a
                       a <=  addEdge x y a
  addNode x emptyDigraph <=  addNode x a
             addNode x a <=  addEdge x y a
            isEdge x y a ==> isNode x a
            isEdge x y a ==> isNode y a
            isPath x y a ==> isNode x a
            isPath x y a ==> isNode y a
            isEdge x y a ==> isPath x y a
addEdge x y emptyDigraph <=  addEdge x y a

   elem x xs ==> subgraph xs (addNode x emptyDigraph) == addNode x emptyDigraph
   elem x xs ==>            addNode x (subgraph xs a) == subgraph xs (addNode x a)
isEdge x y a ==>                        addEdge x y a == a

