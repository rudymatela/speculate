_ :: [Word2]  (holes: [Word2])
_ :: BT Word2  (holes: BT Word2)
_ :: Bool  (holes: Bool)
_ :: Word2  (holes: Word2)
Null :: BT Word2
True :: Bool
False :: Bool
insert :: Word2 -> BT Word2 -> BT Word2
delete :: Word2 -> BT Word2 -> BT Word2
toList :: BT Word2 -> [Word2]
fromList :: [Word2] -> BT Word2
isSearch :: BT Word2 -> Bool
ordered :: [Word2] -> Bool
isIn :: Word2 -> BT Word2 -> Bool
(<=) :: Word2 -> Word2 -> Bool
(==) :: Word2 -> Word2 -> Bool
(/=) :: Word2 -> Word2 -> Bool
(==) :: [Word2] -> [Word2] -> Bool
(==) :: BT Word2 -> BT Word2 -> Bool
(==) :: Bool -> Bool -> Bool

toList (fromList (toList (fromList xs))) == toList (fromList xs)
                           delete x Null == Null
                   delete x (insert x t) == delete x t
                   insert x (insert x t) == insert x t
 fromList (toList (fromList (toList t))) == fromList (toList t)
       fromList (toList (insert x Null)) == insert x Null
                   delete x (delete y t) == delete y (delete x t)
                              isSearch t == True
                                (x == y) == (False == (x /= y))
                                isIn x t == (t == insert x t)
                                (x /= x) == False
                                (x <= x) == True
                                (t == t) == True
                              (xs == xs) == True
                                (p == p) == True
                      ordered (toList t) == True
                             (p == True) == p
                     (xs == toList Null) == (Null == fromList xs)
                    (Null == insert x t) == False
           (fromList (toList t) == Null) == (t == Null)

          p ==> True
       Null <=  t
      False ==> p
toList Null <=  xs
          t <=  insert x t

         ordered xs ==> fromList (toList (fromList xs)) == fromList xs
             x /= y ==>        delete y (insert x Null) == insert x Null
False == ordered xs ==>                      delete y u == delete x t
False == ordered xs ==>                      insert x u == insert x t
False == ordered xs ==>             toList (delete y u) == toList (delete x t)
False == ordered xs ==>  fromList (toList (delete y u)) == delete x t
False == ordered xs ==>             toList (insert x u) == toList (insert x t)
False == ordered xs ==>  fromList (toList (insert x u)) == insert x t
False == ordered xs ==>  fromList (toList (delete y u)) == fromList (toList (delete x t))
False == ordered xs ==>  delete y (fromList (toList u)) == fromList (toList (delete x t))
False == ordered xs ==>  fromList (toList (insert x u)) == fromList (toList (insert x t))
False == ordered xs ==>  insert x (fromList (toList u)) == fromList (toList (insert x t))
False == ordered ys ==>          delete y (fromList xs) == delete x t
False == ordered ys ==>           delete x (delete y t) == delete x (fromList xs)
False == ordered ys ==>           insert x (delete y t) == insert x (fromList xs)
False == ordered ys ==>           delete y (delete y t) == delete x (fromList xs)
False == ordered ys ==>  fromList (toList (delete y t)) == delete x (fromList xs)
False == ordered ys ==> toList (delete y (fromList xs)) == toList (delete x t)

