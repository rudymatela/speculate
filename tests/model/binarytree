max expr size  =    5
  |- on ineqs  =    4
  |- on conds  =    4
max  #-tests   =  500
min  #-tests   =   25  (to consider p ==> q true)
max  #-vars    =    2  (for inequational and conditional laws)

_ :: [Word2]  (holes: [Word2])
_ :: BT Word2  (holes: BT Word2)
_ :: Bool  (holes: Bool)
_ :: Word2  (holes: Word2)
Null :: BT Word2
insert :: Word2 -> BT Word2 -> BT Word2
delete :: Word2 -> BT Word2 -> BT Word2
toList :: BT Word2 -> [Word2]
fromList :: [Word2] -> BT Word2
isSearch :: BT Word2 -> Bool
ordered :: [Word2] -> Bool
isIn :: Word2 -> BT Word2 -> Bool
(<=) :: Word2 -> Word2 -> Bool
(/=) :: Word2 -> Word2 -> Bool
True :: Bool
False :: Bool
(==) :: [Word2] -> [Word2] -> Bool
(==) :: BT Word2 -> BT Word2 -> Bool
(==) :: Bool -> Bool -> Bool
(==) :: Word2 -> Word2 -> Bool

                    delete x Null == Null
  fromList (toList (fromList xs)) == fromList xs
            insert x (insert x t) == insert x t
            delete x (insert x t) == delete x t
   insert x (fromList (toList t)) == fromList (toList (insert x t))
fromList (toList (insert x Null)) == insert x Null
            delete x (delete y t) == delete y (delete x t)
            insert x (insert y t) == insert y (insert x t)
                       isSearch t == True
                         isIn x t == (t == insert x t)
               ordered (toList t) == True
              (xs == toList Null) == (Null == fromList xs)
           (toList t == toList u) == (t == u)
             (Null == insert x t) == False
    (Null == fromList (toList t)) == (Null == t)

               Null <=  t
        toList Null <=  xs
                  t <=  insert x t
         delete x t <=  t
fromList (toList t) <=  t
      insert x Null <=  insert x t
   t == fromList xs ==> ordered xs
     xs == toList t ==> ordered xs

x /= y ==> insert y (delete x t) == delete x (insert y t)

