_ :: [Word2]  (holes: [Word2])
_ :: BT Word2  (holes: BT Word2)
_ :: Bool  (holes: Bool)
_ :: Word2  (holes: Word2)
Null :: BT Word2
insert :: Word2 -> BT Word2 -> BT Word2
delete :: Word2 -> BT Word2 -> BT Word2
toList :: BT Word2 -> [Word2]
fromList :: [Word2] -> BT Word2
isSearch :: BT Word2 -> Bool
ordered :: [Word2] -> Bool
isIn :: Word2 -> BT Word2 -> Bool
(<=) :: Word2 -> Word2 -> Bool
(/=) :: Word2 -> Word2 -> Bool
True :: Bool
False :: Bool
(==) :: [Word2] -> [Word2] -> Bool
(==) :: BT Word2 -> BT Word2 -> Bool
(==) :: Bool -> Bool -> Bool
(==) :: Word2 -> Word2 -> Bool

toList (fromList (toList (fromList xs))) == toList (fromList xs)
                           delete x Null == Null
                   insert x (insert x t) == insert x t
                   delete x (insert x t) == delete x t
 fromList (toList (fromList (toList t))) == fromList (toList t)
       fromList (toList (insert x Null)) == insert x Null
                   delete x (delete y t) == delete y (delete x t)
                              isSearch t == True
                                isIn x t == (t == insert x t)
                      ordered (toList t) == True
                     (xs == toList Null) == (Null == fromList xs)
                    (Null == insert x t) == False
           (fromList (toList t) == Null) == (t == Null)

       Null <= t
toList Null <= xs
          t <= insert x t

ordered xs ==> fromList (toList (fromList xs)) == fromList xs

