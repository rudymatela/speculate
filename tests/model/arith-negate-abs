max expr size  =    5
max  #-tests   =  500
min  #-tests   =   25  (to consider p ==> q true)
max  #-vars    =    2  (for inequational and conditional laws)

_ :: Int  (holes: Int)
0 :: Int
1 :: Int
id :: Int -> Int
abs :: Int -> Int
negate :: Int -> Int
(+) :: Int -> Int -> Int
(*) :: Int -> Int -> Int

             id x == x
      abs (abs x) == abs x
negate (negate x) == x
   abs (negate x) == abs x
            x * 0 == 0
            x * 1 == x
            x + 0 == x
            x * y == y * x
            x + y == y + x
            x + x == x * (1 + 1)
     x * negate y == negate (x * y)
     negate x + y == negate (x + negate y)
      abs (x * x) == x * x
     x + negate x == 0
      (x * y) * z == x * (y * z)
      (x + y) + z == x + (y + z)
        x * y + x == x * (y + 1)
  abs (x * abs y) == abs (x * y)
    abs x * abs y == abs (x * y)
  abs (x + abs x) == x + abs x
    abs x + abs x == abs (x + x)
  abs (1 + abs x) == 1 + abs x

             x <= abs x
             0 <= abs x
             x <= x * x
             x <= x + 1
             0 <= x * x
      negate x <= abs x
negate (abs x) <= x
negate (abs x) <= 0
             x <= x + abs y
             x <= abs (x + x)
         abs x <= x * x
negate (x * x) <= x
negate (abs x) <= negate x
             x <= 1 + abs x
             0 <= x + abs x
negate (x * x) <= 0
  x + negate 1 <= x
         abs x <= abs (x + x)
negate (x * x) <= negate x
negate (x + 1) <= negate x
         x + y <= x + abs y
     x * abs x <= x * x
negate (x * x) <= negate (abs x)
     x * abs y <= abs (x * y)
  x + negate y <= x + abs y
     x + abs x <= abs (x + x)
negate (x * x) <= x * abs x
   abs (x + 1) <= 1 + abs x

