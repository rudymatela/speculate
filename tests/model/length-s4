max expr size  =    4
  |- on ineqs  =    3
  |- on conds  =    3
max  #-tests   =  500
min  #-tests   =   25  (to consider p ==> q true)
max  #-vars    =    2  (for inequational and conditional laws)

_ :: [Int]  (holes: [Int])
_ :: Int  (holes: Int)
0 :: Int
[] :: [Int]
(:) :: Int -> [Int] -> [Int]
(++) :: [Int] -> [Int] -> [Int]
length :: [Int] -> Int

         xs ++ [] == xs
         [] ++ xs == xs
length (xs ++ ys) == length (ys ++ xs)
    length (x:xs) == length (y:xs)

 [] <= xs
 xs <= xs ++ ys
[x] <= x:xs
  0 <= length xs

