max expr size  =    4
  |- on ineqs  =    3
  |- on conds  =    3
max  #-tests   = 6000
min  #-tests   =  300  (to consider p ==> q true)
max  #-vars    =    2  (for inequational and conditional laws)

_ :: [Nat]  (holes: [Nat])
_ :: Digraph Nat  (holes: Digraph Nat)
_ :: Nat  (holes: Nat)
_ :: Bool  (holes: Bool)
False :: Bool
True :: Bool
[] :: [Nat]
elem :: Nat -> [Nat] -> Bool
emptyDigraph :: Digraph Nat
preds :: Nat -> Digraph Nat -> [Nat]
succs :: Nat -> Digraph Nat -> [Nat]
isNode :: Nat -> Digraph Nat -> Bool
isEdge :: Nat -> Nat -> Digraph Nat -> Bool
isPath :: Nat -> Nat -> Digraph Nat -> Bool
addNode :: Nat -> Digraph Nat -> Digraph Nat
addEdge :: Nat -> Nat -> Digraph Nat -> Digraph Nat
subgraph :: [Nat] -> Digraph Nat -> Digraph Nat
(==) :: [Nat] -> [Nat] -> Bool
(==) :: Digraph Nat -> Digraph Nat -> Bool
(==) :: Nat -> Nat -> Bool
(==) :: Bool -> Bool -> Bool

    preds x emptyDigraph == []
    succs x emptyDigraph == []
subgraph xs emptyDigraph == emptyDigraph
           subgraph [] a == emptyDigraph
   isNode x emptyDigraph == False
 isEdge x y emptyDigraph == False
 isPath x y emptyDigraph == False
            isPath x x a == isNode x a

          emptyDigraph <= a
                     a <= addNode x a
         subgraph xs a <= a
addNode x emptyDigraph <= addNode x a

isNode x a ==> addNode x a == a

