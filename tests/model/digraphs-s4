_ :: [Nat]  (holes: [Nat])
_ :: Digraph Nat  (holes: Digraph Nat)
_ :: Nat  (holes: Nat)
_ :: Bool  (holes: Bool)
False :: Bool
True :: Bool
[] :: [Nat]
emptyDigraph :: Digraph Nat
preds :: Nat -> Digraph Nat -> [Nat]
succs :: Nat -> Digraph Nat -> [Nat]
isNode :: Nat -> Digraph Nat -> Bool
isEdge :: Nat -> Nat -> Digraph Nat -> Bool
isPath :: Nat -> Nat -> Digraph Nat -> Bool
addNode :: Nat -> Digraph Nat -> Digraph Nat
addEdge :: Nat -> Nat -> Digraph Nat -> Digraph Nat
subgraph :: [Nat] -> Digraph Nat -> Digraph Nat
(==) :: Nat -> Nat -> Bool
elem :: Nat -> [Nat] -> Bool

                (x == x) == True
    preds x emptyDigraph == []
    succs x emptyDigraph == []
subgraph xs emptyDigraph == emptyDigraph
           subgraph [] a == emptyDigraph
               elem x [] == False
   isNode x emptyDigraph == False
            isPath x x a == isNode x a
 isEdge x y emptyDigraph == False
 isPath x y emptyDigraph == False
                (x == y) == (y == x)

           p ==> True
          [] <=  xs
emptyDigraph <=  a
       False ==> p

