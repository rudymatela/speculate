_ :: (Expr,Expr)  (holes: (Expr,Expr))
_ :: Expr  (holes: Expr)
_ :: Bool  (holes: Bool)
_ :: [(Expr,Expr)]  (holes: [(Expr,Expr)])
_ :: Thy  (holes: Thy)
okThy :: Thy -> Bool
insert :: (Expr,Expr) -> Thy -> Thy
complete :: Thy -> Thy
append :: Thy -> [(Expr,Expr)] -> Thy
normalize :: Thy -> Expr -> Expr
equivalent :: Thy -> Expr -> Expr -> Bool
emptyThy :: Thy
True :: Bool
False :: Bool

            normalize emptyThy e == e
      normalize (append t eqs) e == normalize t e
     normalize t (normalize t e) == normalize t e
normalize (insert eq emptyThy) e == normalize (insert eq' emptyThy) e
                         okThy t == True
                equivalent t e e == True
         equivalent emptyThy e f == equivalent emptyThy f e

