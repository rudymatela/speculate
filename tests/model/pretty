max expr size  =    7
  |- on ineqs  =    6
  |- on conds  =    6
max  #-tests   =  500
min  #-tests   =   25  (to consider p ==> q true)
max  #-vars    =    3  (for inequational and conditional laws)

_ :: Doc  (holes: Doc)
_ :: Int  (holes: Int)
_ :: [Char]  (holes: [Char])
($$) :: Doc -> Doc -> Doc
(<>) :: Doc -> Doc -> Doc
nest :: Int -> Doc -> Doc
(++) :: [Char] -> [Char] -> [Char]
length :: [Char] -> Int

           (d1 $$ d2) $$ d3 == d1 $$ (d2 $$ d3)
           (d1 <> d2) <> d3 == d1 <> (d2 <> d3)
            d1 <> nest x d2 == d1 <> d2
           (d1 $$ d2) <> d3 == d1 $$ (d2 <> d3)
          nest x (d1 $$ d2) == nest x d1 $$ nest x d2
          nest x (d1 <> d2) == nest x d1 <> d2
         nest x (nest y d1) == nest y (nest x d1)
nest (length (cs ++ ds)) d1 == nest (length cs) (nest (length ds) d1)
    d1 <> (nest x d2 <> d3) == d1 <> (d2 <> d3)
          length (cs ++ ds) == length (ds ++ cs)
  length (cs ++ (ds ++ es)) == length (cs ++ (es ++ ds))
           (cs ++ ds) ++ es == cs ++ (ds ++ es)

              d1 <= d1 $$ d2
              d1 <= d1 <> d2
        d1 $$ d2 <= d1 $$ (d2 $$ d3)
        d1 <> d2 <= d1 <> (d2 <> d3)
        d1 $$ d2 <= d1 $$ (d2 <> d3)
        d1 $$ d2 <= (d1 <> d2) $$ d3
        d1 $$ d2 <= (d1 <> d3) $$ d2
        d1 $$ d2 <= d1 <> (d2 $$ d3)
        d1 <> d2 <= d1 <> (d2 $$ d3)
        d1 $$ d2 <= d1 <> (d1 $$ d2)
d1 $$ (d2 <> d3) <= (d1 <> d2) $$ d3
d1 $$ (d2 <> d3) <= (d1 <> d3) $$ d2
d2 $$ (d1 <> d1) <= (d2 <> d1) $$ d3
d2 $$ (d1 <> d1) <= d2 <> (d1 $$ d3)
d1 $$ (d1 <> d2) <= d1 <> (d1 $$ d2)
d1 $$ (d2 <> d1) <= d1 <> (d1 $$ d2)
       length cs <= length (cs ++ ds)
              cs <= cs ++ ds
        cs ++ ds <= cs ++ (ds ++ es)

