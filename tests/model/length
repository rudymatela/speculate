max expr size  =    5
  |- on ineqs  =    4
  |- on conds  =    4
max  #-tests   =  500
min  #-tests   =   25  (to consider p ==> q true)
max  #-vars    =    2  (for inequational and conditional laws)

_ :: [Int]  (holes: [Int])
_ :: Int  (holes: Int)
0 :: Int
[] :: [Int]
(:) :: Int -> [Int] -> [Int]
(++) :: [Int] -> [Int] -> [Int]
length :: [Int] -> Int

         xs ++ [] == xs
         [] ++ xs == xs
             x:xs == [x] ++ xs
 (xs ++ ys) ++ zs == xs ++ (ys ++ zs)
length (xs ++ ys) == length (ys ++ xs)
    length (x:xs) == length (y:xs)

       [] <= xs
        0 <= length xs
       xs <= xs ++ ys
length xs <= length (xs ++ ys)
     0:xs <= length xs:ys
     0:xs <= length ys:xs

