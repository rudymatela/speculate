== Signature ==
  (++) :: [Int] -> [Int] -> [Int]
length :: [Int] -> Int
   zip :: [Int] -> [Int] -> [(Int, Int)]
eqLen0 :: Predicates -> [Int]
eqLen1 :: Predicates -> [Int]
 eqLen :: [Int] -> [Int] -> Bool

== Laws ==
  1. eqLen xs ys => length xs = length ys
  2. eqLen xs ys = eqLen ys xs
  3. eqLen xs xs = eqLen ys ys
  4. eqLen ys zs => eqLen xs ys = eqLen xs zs
  5. length (xs ++ ys) = length (ys ++ xs)
  6. (xs ++ ys) ++ zs = xs ++ (ys ++ zs)
  7. zip xs (xs ++ ys) = zip xs xs
  8. zip (xs ++ ys) xs = zip xs xs
  9. eqLen ys zs => length (xs ++ ys) = length (xs ++ zs)
 10. eqLen xs (ys ++ zs) = eqLen xs (zs ++ ys)
 11. eqLen xs (xs ++ ys) = eqLen zs (zs ++ ys)

